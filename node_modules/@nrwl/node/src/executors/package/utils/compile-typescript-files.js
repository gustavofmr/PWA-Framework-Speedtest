"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const ts = require("typescript");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utilities/buildable-libs-utils");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
function createProgram(tsconfig, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const host = ts.createCompilerHost(tsconfig.options);
        const program = ts.createProgram({
            rootNames: tsconfig.fileNames,
            options: tsconfig.options,
            host,
        });
        devkit_1.logger.info(`Compiling TypeScript files for library ${context.projectName}...`);
        const results = program.emit();
        if (results.emitSkipped) {
            const diagnostics = ts.formatDiagnosticsWithColorAndContext(results.diagnostics, {
                getCurrentDirectory: () => ts.sys.getCurrentDirectory(),
                getNewLine: () => ts.sys.newLine,
                getCanonicalFileName: (name) => name,
            });
            devkit_1.logger.error(diagnostics);
            throw new Error(diagnostics);
        }
        else {
            devkit_1.logger.info(`Done compiling TypeScript files for library ${context.projectName}`);
            return { success: true };
        }
    });
}
function createWatchProgram(tsconfig) {
    const host = ts.createWatchCompilerHost(tsconfig.fileNames, tsconfig.options, ts.sys);
    ts.createWatchProgram(host);
    return { success: true };
}
function compileTypeScriptFiles(options, context, libRoot, projectDependencies) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (options.deleteOutputPath) {
            fs_extra_1.removeSync(options.normalizedOutputPath);
        }
        let tsConfigPath = path_1.join(context.root, options.tsConfig);
        if (projectDependencies.length > 0) {
            tsConfigPath = buildable_libs_utils_1.createTmpTsConfig(tsConfigPath, context.root, libRoot, projectDependencies);
        }
        const tsconfig = typescript_1.readTsConfig(tsConfigPath);
        tsconfig.options.outDir = options.normalizedOutputPath;
        tsconfig.options.noEmitOnError = true;
        if (options.srcRootForCompilationRoot) {
            tsconfig.options.rootDir = options.srcRootForCompilationRoot;
        }
        else {
            tsconfig.options.rootDir = libRoot;
        }
        if (options.watch) {
            return createWatchProgram(tsconfig);
        }
        else {
            return createProgram(tsconfig, context);
        }
    });
}
exports.default = compileTypeScriptFiles;
//# sourceMappingURL=compile-typescript-files.js.map