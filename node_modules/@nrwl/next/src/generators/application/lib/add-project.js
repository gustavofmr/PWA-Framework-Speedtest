"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addProject = void 0;
const devkit_1 = require("@nrwl/devkit");
function addProject(host, options) {
    const nxConfig = {
        tags: options.parsedTags,
    };
    const targets = {};
    targets.build = {
        builder: '@nrwl/next:build',
        outputs: ['{options.outputPath}'],
        options: {
            root: options.appProjectRoot,
            outputPath: devkit_1.joinPathFragments('dist', options.appProjectRoot),
        },
        // This has to be here so `nx serve [app] --prod` will work. Otherwise
        // a missing configuration error will be thrown.
        configurations: {
            production: {},
        },
    };
    targets.serve = {
        builder: '@nrwl/next:server',
        options: {
            buildTarget: `${options.projectName}:build`,
            dev: true,
        },
        configurations: {
            production: {
                buildTarget: `${options.projectName}:build:production`,
                dev: false,
            },
        },
    };
    if (options.server) {
        targets.serve.options = Object.assign(Object.assign({}, targets.serve.options), { customServerPath: options.server });
    }
    targets.export = {
        builder: '@nrwl/next:export',
        options: {
            buildTarget: `${options.projectName}:build:production`,
        },
    };
    const project = {
        root: options.appProjectRoot,
        sourceRoot: options.appProjectRoot,
        projectType: 'application',
        targets,
    };
    devkit_1.addProjectConfiguration(host, options.projectName, Object.assign(Object.assign({}, project), nxConfig));
}
exports.addProject = addProject;
//# sourceMappingURL=add-project.js.map