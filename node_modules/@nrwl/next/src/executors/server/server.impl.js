"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const constants_1 = require("next/dist/next-server/lib/constants");
const chalk = require("chalk");
const fs_1 = require("fs");
const path_1 = require("path");
const config_1 = require("../../utils/config");
const custom_server_1 = require("./lib/custom-server");
const default_server_1 = require("./lib/default-server");
try {
    require('dotenv').config();
}
catch (e) { }
const infoPrefix = `[ ${chalk.dim(chalk.cyan('info'))} ] `;
const readyPrefix = `[ ${chalk.green('ready')} ]`;
function serveExecutor(options, context) {
    return tslib_1.__asyncGenerator(this, arguments, function* serveExecutor_1() {
        const buildTarget = devkit_1.parseTargetString(options.buildTarget);
        const baseUrl = `http://${options.hostname || 'localhost'}:${options.port}`;
        const buildOptions = devkit_1.readTargetOptions(buildTarget, context);
        const root = path_1.resolve(context.root, buildOptions.root);
        const config = yield tslib_1.__await(config_1.prepareConfig(options.dev ? constants_1.PHASE_DEVELOPMENT_SERVER : constants_1.PHASE_PRODUCTION_SERVER, buildOptions, context));
        const settings = {
            dev: options.dev,
            dir: root,
            staticMarkup: options.staticMarkup,
            quiet: options.quiet,
            conf: config,
            port: options.port,
            path: options.customServerPath,
            hostname: options.hostname,
        };
        const server = options.customServerPath
            ? custom_server_1.customServer
            : default_server_1.defaultServer;
        // look for the proxy.conf.json
        let proxyConfig;
        const proxyConfigPath = options.proxyConfig
            ? path_1.join(context.root, options.proxyConfig)
            : path_1.join(root, 'proxy.conf.json');
        if (fs_1.existsSync(proxyConfigPath)) {
            devkit_1.logger.info(`${infoPrefix} found proxy configuration at ${proxyConfigPath}`);
            proxyConfig = require(proxyConfigPath);
        }
        try {
            yield tslib_1.__await(server(settings, proxyConfig));
            devkit_1.logger.info(`${readyPrefix} on ${baseUrl}`);
            yield yield tslib_1.__await({
                baseUrl,
                success: true,
            });
            // This Promise intentionally never resolves, leaving the process running
            yield tslib_1.__await(new Promise(() => { }));
        }
        catch (e) {
            if (options.dev) {
                throw e;
            }
            else {
                throw new Error(`Could not start production server. Try building your app with \`nx build ${context.projectName}\`.`);
            }
        }
    });
}
exports.default = serveExecutor;
//# sourceMappingURL=server.impl.js.map